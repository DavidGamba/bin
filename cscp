#!/usr/bin/perl -w
use strict;
use Env qw(HOME);
use Expect;
use Getopt::Long qw(:config passthrough no_ignore_case);
use Pod::Usage;

my $recursive;
GetOptions(
  'h|?'  => sub { pod2usage( -verbose => 0 ) },
  'help' => sub { pod2usage( -verbose => 3 ) },
  'r' => \$recursive,
);

my $remote;
my $remote_hostname;
my $remote_location;
my $remote_first = 0;
my $local;
if($ARGV[0] =~ /:/) {
  $remote_first = 1;
  $remote = shift;
  $local = shift;
}
else {
  $local = shift;
  $remote = shift;
}

pod2usage("[ERROR] Missing remote!\n")
unless defined $remote;

pod2usage("[ERROR] Missing local!\n")
unless defined $local;

($remote_hostname,$remote_location) = split(/:/, $remote);

open my $in, '<', "$HOME/.ssh/config" or die "Can't open file: $!\n";
while (<$in>) {
    if (/Host $remote_hostname # (\S*)/) {
        my $password = $1;
        interactive_scp( $remote, $password );
    }
    elsif (/Host \* # (\S*)/) {
        my $password = $1;
        interactive_scp( $remote, $password );
    }
}
interactive_scp( $remote );

sub interactive_scp
{
    my $hostname = shift;
    my $password = shift;
    my $timeout  = 15;

    my @cmd = ( 'scp' );
    push @cmd, '-r' if $recursive;
    if($remote_first) {
      push @cmd, $remote, $local;
    }
    else {
      push @cmd, $local, $remote;
    }

    my $exp = new Expect;
    $exp->spawn(@cmd);

    if( defined $password ) {
      $exp->expect(
        $timeout,
        [   qr/no\)\?\s+$/i => sub {
            my $self = shift;
            $self->send("yes\n");
            exp_continue;
          }
        ],
        [   qr/password:\s+$/i => sub {
            my $self = shift;
            $self->send("$password\n");
            exp_continue;
          }
        ],
        '-re',
        qr/%/,    #' wait for shell prompt, then exit expect
      );
    }
    else {
      $exp->expect(
        $timeout,
        [   qr/no\)\?\s+$/i => sub {
            my $self = shift;
            $self->send("yes\n");
            exp_continue;
          }
        ],
        '-re',
        qr/password:\s+$/,    #' wait for shell prompt, then exit expect
      );
    }
    $exp->interact();
    $exp->soft_close();
    exit 0;
}

__END__

=head1 NAME

cscp

=head1 DESCRIPTION

Given a hostname it reads the file ~/.ssh/config and checks if a password is
present. If it is, it uses it to scp. If not, it will ask for the password.

~/.ssh/config file syntax:

  Syntax:
  Host hostname # password
    Hostname full_hostname
    User username

=head1 SYNOPSIS

  cscp [-r] <dir_or_file> <[user@]hostname:[dir_or_file]>
  cscp [-r] <[user@]hostname:[dir_or_file]> <dir_or_file>
  cscp [--help]       # shows extended help
  cscp [-h |-?]       # shows short help

=head1 DEPENDENCIES

  cpan Expect
  cpan IO::Stty
